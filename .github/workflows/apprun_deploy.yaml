# save as: .github/workflows/deploy.yml
name: Deploy to AWS App Runner

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: nvda-2hr
  APP_RUNNER_SERVICE: nvda-2hr
  DOCKER_CONTEXT: EXP

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      id: aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        audience: sts.amazonaws.com
        role-session-name: GitHubActionsSession

    - name: Login to Amazon ECR
      id: login-ecr
      run: |
        echo "🔑 Attempting ECR Login..."
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
        echo "ECR Registry: ${ECR_REGISTRY}"
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${ECR_REGISTRY}

    - name: Build and push image to Amazon ECR
      id: build-image
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"
        
        # Debug directory contents
        echo "Contents of repository:"
        ls -la
        echo "Contents of EXP directory:"
        ls -la EXP/
        
        # Build and push
        docker build -t ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} -f ${{ env.DOCKER_CONTEXT }}/Dockerfile ${{ env.DOCKER_CONTEXT }}
        docker push ${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        
        # Set output
        echo "image=${ECR_REGISTRY}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT

    - name: Deploy to App Runner
      id: deploy
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        ECR_IMAGE="${ACCOUNT_ID}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
        
        if ! aws apprunner list-services --region ${{ env.AWS_REGION }} | grep -q "${{ env.APP_RUNNER_SERVICE }}"; then
          echo "Creating new App Runner service..."
          aws apprunner create-service \
            --region ${{ env.AWS_REGION }} \
            --service-name ${{ env.APP_RUNNER_SERVICE }} \
            --source-configuration "{
              \"AuthenticationConfiguration\": {
                \"AccessRoleArn\": \"${{ secrets.AWS_APPRUNNER_ECR_ACCESS_ROLE }}\"
              },
              \"AutoDeploymentsEnabled\": true,
              \"ImageRepository\": {
                \"ImageIdentifier\": \"${ECR_IMAGE}\",
                \"ImageRepositoryType\": \"ECR\",
                \"ImageConfiguration\": {
                  \"Port\": \"8000\"
                }
              }
            }" \
            --instance-configuration "{
              \"Cpu\": \"1024\",
              \"Memory\": \"2048\"
            }"
        else
          echo "Updating existing App Runner service..."
          aws apprunner update-service \
            --region ${{ env.AWS_REGION }} \
            --service-name ${{ env.APP_RUNNER_SERVICE }} \
            --source-configuration "{
              \"AuthenticationConfiguration\": {
                \"AccessRoleArn\": \"${{ secrets.AWS_APPRUNNER_ECR_ACCESS_ROLE }}\"
              },
              \"AutoDeploymentsEnabled\": true,
              \"ImageRepository\": {
                \"ImageIdentifier\": \"${ECR_IMAGE}\",
                \"ImageRepositoryType\": \"ECR\",
                \"ImageConfiguration\": {
                  \"Port\": \"8000\"
                }
              }
            }"
        fi

    - name: Get App Runner URL
      id: get-url
      run: |
        aws apprunner wait service-updated --service-name ${{ env.APP_RUNNER_SERVICE }} --region ${{ env.AWS_REGION }}
        URL=$(aws apprunner describe-service --service-name ${{ env.APP_RUNNER_SERVICE }} --region ${{ env.AWS_REGION }} --query "Service.ServiceUrl" --output text)
        echo "APP_URL=https://${URL}" >> $GITHUB_OUTPUT
        echo "::notice title=Deployment URL::https://${URL}"

    - name: Display App URL
      run: |
        echo "🚀 Application deployed successfully!"
        echo "📝 Application URL: ${{ steps.get-url.outputs.APP_URL }}"